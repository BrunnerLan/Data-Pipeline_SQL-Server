{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSVFilesSource_Members",
						"type": "DatasetReference"
					},
					"name": "CSVSourceCheckInCode",
					"description": "Remove empty lines"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLDatabaseSink_Members",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "FilterEmptyCheckInCode"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Phone as string,",
				"          {2nd Phone} as string,",
				"          Email as string,",
				"          {2nd Email} as string,",
				"          {Date of birth} as string,",
				"          Age as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Country as string,",
				"          {Zip code} as string,",
				"          Gender as string,",
				"          Type as string,",
				"          Membership as string,",
				"          {Membership 1} as string,",
				"          {Membership 1 Start  Date} as string,",
				"          {Membership 1 End Date} as string,",
				"          {Membership 1 Credits} as boolean,",
				"          {Membership 2} as string,",
				"          {Membership 2 Start  Date} as string,",
				"          {Membership 2 End Date} as string,",
				"          {Membership 2 Credits} as boolean,",
				"          {Membership 3} as string,",
				"          {Membership 3 Start  Date} as string,",
				"          {Membership 3 End Date} as string,",
				"          {Membership 3 Credits} as boolean,",
				"          {Membership 4} as string,",
				"          {Membership 4 Start  Date} as string,",
				"          {Membership 4 End Date} as string,",
				"          {Membership 4 Credits} as boolean,",
				"          Contacts as string,",
				"          {Contacts 1} as string,",
				"          {Contacts 1 Number} as string,",
				"          {Contacts 2} as string,",
				"          {Contacts 2 Number} as string,",
				"          {Contacts 3} as string,",
				"          {Contacts 3 Number} as string,",
				"          Status as string,",
				"          Joined as string,",
				"          {Check-in code} as integer,",
				"          {Last Visit} as string,",
				"          {Last Payment} as string,",
				"          {Last Login} as string,",
				"          Notes as string,",
				"          Ranks as string,",
				"          {Ranks 1} as string,",
				"          {Ranks 1 Level} as string,",
				"          {Ranks 1 Date} as string,",
				"          {Ranks 2} as string,",
				"          {Ranks 2 Level} as string,",
				"          {Ranks 2 Date} as string,",
				"          {Ranks 3} as string,",
				"          {Ranks 3 Level} as string,",
				"          {Ranks 3 Date} as string,",
				"          {Ranks 4} as string,",
				"          {Ranks 4 Level} as string,",
				"          {Ranks 4 Date} as string,",
				"          Beruf as string,",
				"          {Erste Zahlung am:} as string,",
				"          {Austritts Datum:} as string,",
				"          {AHV-Nummer} as string,",
				"          {Familien Account} as boolean,",
				"          {Grund KÃ¼ndigung} as string,",
				"          {Start Pausierung} as string,",
				"          {Ende Pausierung} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CSVSourceCheckInCode",
				"CSVSourceCheckInCode filter(!isNull({Check-in code}) && length(trim(toString({Check-in code}))) > 0",
				") ~> FilterEmptyCheckInCode",
				"FilterEmptyCheckInCode sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}